# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SbCW8kHXRsDJIk6hGPzVzux6Ff9h41ov
"""

from flask import Flask
from keras.models import load_model
import cv2
from keras.models import model_from_json

import numpy as np
from flask_cors import CORS
from flask import jsonify
import pandas as pd
# from __future__ import unicode_literals
import json
import time
from flask import request
from keras.preprocessing.image import load_img, img_to_array

app = Flask(__name__)


# LOAD THE MODEL HERE
json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)

# load weights into new model
loaded_model.load_weights("model.h5")

data_path = 'nutri.csv'


@app.route("/foodchecker")
def home():
    return "Welcome to flask backend !"


Name = ['mysore_pak', 'unni_appam', 'paneer_butter_masala', 'jalebi', 'biryani', 'chapati']

N = []
for i in range(len(Name)):
    N += [i]

mapping = dict(zip(Name, N))
reverse_mapping = dict(zip(N, Name))


def mapper(value):
    return reverse_mapping[value]

calorie_data = pd.read_csv(data_path)
calorie_data.head()


def load_calorie_data(name_of_food):
    calorie_data_of_food = calorie_data[calorie_data['Food Name'] == name_of_food]
    return calorie_data_of_food


@app.route("/food_check")
def predict_by_model():
    try:
        image = load_img("biryani.jpg", target_size=(40, 40))

        # preprocessing the image
        image = img_to_array(image)
        image = image / 255.0
        prediction_image = np.array(image)
        prediction_image = np.expand_dims(image, axis=0)
        # predict the model
        prediction = loaded_model.predict(prediction_image)
        value = np.argmax(prediction)
        food_name = mapper(value)
        print("Prediction is {}.".format(food_name))

        calorie_data_of_food = load_calorie_data(food_name)
        dictionary_response = {'name_of_food': food_name, 'CALORIES': calorie_data_of_food['calories'],
                               'CARBS': calorie_data_of_food['carbs_gram'], 'FATS': calorie_data_of_food['fats_gram'],
                               'PROTIEN': calorie_data_of_food['protien_gram'], 'SUITABLE_DIABETES': None,
                               'SUITABLE_CHOLESTROL': None, 'SUITABLE_PREGNANCY': None}
        json_response = json.load(dictionary_response)

        return json_response

    except Exception as e:
        return jsonify(error=str(e))


CORS(app)
app.run()


